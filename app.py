import osfrom flask import Flask, render_template, request, send_file, session, redirect, url_for, flashfrom datetime import date, timedelta, datetimefrom dateutil.relativedelta import relativedelta # Useful for adding years preciselyfrom ics import Calendar, Eventimport ioimport mathapp = Flask(__name__)app.secret_key = os.urandom(24) # Replace with a permanent key if deploying# --- Constants ---DAYS_IN_YEAR = 365.2425SEVENTH_OF_YEAR_TD = timedelta(days=DAYS_IN_YEAR / 7)MONTH_NAMES = {    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',    7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}# --- Helper Functions ---def get_ordinal(n):    if 11 <= (n % 100) <= 13:        suffix = 'th'    else:        suffix = ['th', 'st', 'nd', 'rd', 'th'][min(n % 10, 4)]    return str(n) + suffixdef calculate_all_birthdays(dog_name, birth_date):    """Calculates all 140 birthdays, formatted label, returns list and ics Calendar."""    calculated_birthdays = []    cal = Calendar()    last_calculated_datetime = datetime.combine(birth_date, datetime.min.time())    birth_year = birth_date.year    birth_month = birth_date.month    birth_day = birth_date.day    for i in range(1, 141):        event_date = None        if i % 7 == 0:            years_to_add = i // 7            try:                event_date = birth_date + relativedelta(years=years_to_add)            except ValueError:                 if birth_month == 2 and birth_day == 29:                     event_date = date(birth_year + years_to_add, 2, 28)                 else:                     print(f"Error calculating exact date for birthday {i}")                     continue            last_calculated_datetime = datetime.combine(event_date, datetime.min.time())        else:            current_calculated_datetime = last_calculated_datetime + SEVENTH_OF_YEAR_TD            event_date = current_calculated_datetime.date()            last_calculated_datetime = current_calculated_datetime        if event_date:          # UPDATED LABEL FORMAT          birthday_label = f"🐶🎉 {dog_name} turns {i}!"          bday_data = {              "number": i,              "date": event_date,              "label": birthday_label          }          calculated_birthdays.append(bday_data)          event = Event()          event.name = birthday_label # Use updated label          event.begin = event_date          event.make_all_day()          event.transparent = True           cal.events.add(event)    # Sort by date just in case floating point calculations caused slight out-of-order issues    calculated_birthdays.sort(key=lambda x: x['date'])    return calculated_birthdays, caldef calculate_same_age_day(dog_birth_date, user_birth_date):    """Calculates the day dog (in 7x dog years) and user are the same age."""    if not dog_birth_date or not user_birth_date:        return None    try:        # d = days from dog's birth for target date        # T = D_birth + d days        # T = U_birth + u days        # Want 7*d = u        # D_birth + d = U_birth + 7d        # D_birth - U_birth = 6d        delta_birth_days = (dog_birth_date - user_birth_date).days        d = delta_birth_days / 6.0        # Round to nearest day for the event        d_rounded = round(d)        target_date = dog_birth_date + timedelta(days=d_rounded)        # Sanity check: Ensure the date is in the future relative to both births        if target_date > dog_birth_date and target_date > user_birth_date:             # Double check ages on that day             user_age_days = (target_date - user_birth_date).days             dog_real_age_days = (target_date - dog_birth_date).days             dog_equiv_age_days = dog_real_age_days * 7             # Allow for rounding difference of up to half a day (multiplied by 6 for the formula)             if abs(user_age_days - dog_equiv_age_days) <= 3: # Check if calculation makes sense                 return target_date             else:                 print(f"WARN: Same age calculation mismatch: User {user_age_days}, DogEquiv {dog_equiv_age_days} on {target_date}")                 return None # Calculation seems off, don't show        else:            # The calculated "same age" day was in the past            return None    except Exception as e:        print(f"Error calculating same age day: {e}")        return None# --- Routes ---@app.route('/', methods=['GET'])def index():    """Displays the initial form."""    current_year = date.today().year    # --- Define Default Year ---    default_selection_dog_year = 2013 # <<<--- ADD THIS LINE    default_selection_user_year = 1985    # Expanded year range for user birthday    dog_years = reversed(range(current_year - 30, current_year + 1))    user_years = reversed(range(current_year - 100, current_year + 1)) # Wider range for humans    months = range(1, 13)    days = range(1, 32)    session.pop('dog_name', None)    session.pop('dog_birth_date_iso', None)    session.pop('user_birth_date_iso', None) # Clear user birthday too    return render_template('index.html',                           dog_years=dog_years,                           user_years=user_years, # Pass user years                           months=months,                           month_names=MONTH_NAMES, # Pass month names                           days=days,                           default_dog_year=default_selection_dog_year,                           default_user_year=default_selection_user_year)@app.route('/calculate', methods=['POST'])def calculate_birthdays_display():    """Calculates birthdays, filters for display, stores inputs."""    dog_name = request.form.get('dog_name', 'Your Dog')    if not dog_name:        dog_name = "The Dog"    # --- Get Dog Birthday ---    try:        dog_birth_year = int(request.form['dog_birth_year'])        dog_birth_month = int(request.form['dog_birth_month'])        dog_birth_day = int(request.form['dog_birth_day'])        dog_birth_date = date(dog_birth_year, dog_birth_month, dog_birth_day)    except (ValueError, KeyError):        flash("Invalid or missing dog birthday. Please check month, day, and year.")        return redirect(url_for('index'))    # --- Get User Birthday (Optional) ---    user_birth_date = None    user_birth_month_str = request.form.get('user_birth_month')    user_birth_day_str = request.form.get('user_birth_day')    user_birth_year_str = request.form.get('user_birth_year')    # Only try to create date if all parts are present    if user_birth_month_str and user_birth_day_str and user_birth_year_str:        try:            user_birth_year = int(user_birth_year_str)            user_birth_month = int(user_birth_month_str)            user_birth_day = int(user_birth_day_str)            user_birth_date = date(user_birth_year, user_birth_month, user_birth_day)        except ValueError:            flash("Invalid user birthday provided. Please check the date or leave blank.")            # Don't redirect, just proceed without user birthday            user_birth_date = None    elif user_birth_month_str or user_birth_day_str or user_birth_year_str:        # If only some parts are filled, flash a warning        flash("Please provide the full user birthday (Month, Day, Year) or leave all parts blank.")        user_birth_date = None    # --- Calculate All Birthdays ---    all_calculated_birthdays, _ = calculate_all_birthdays(dog_name, dog_birth_date)    # --- Filter Birthdays for Display ---    today = date.today()    display_birthdays = []    last_past_bday = None    future_birthdays = []    for bday in all_calculated_birthdays:        if bday['date'] < today:            last_past_bday = bday # Keep track of the latest one        else:            future_birthdays.append(bday) # Collect all future ones    if last_past_bday:        display_birthdays.append(last_past_bday)        display_birthdays.extend(future_birthdays[:9]) # Add up to 9 future ones    else:        # If no past birthdays (dog born today/future), show the first 10        display_birthdays = all_calculated_birthdays[:10]    # --- Calculate Same Age Day ---    same_age_day_date = None    if user_birth_date:        same_age_day_date = calculate_same_age_day(dog_birth_date, user_birth_date)    # --- Store inputs in session ---    session['dog_name'] = dog_name    session['dog_birth_date_iso'] = dog_birth_date.isoformat()    if user_birth_date:        session['user_birth_date_iso'] = user_birth_date.isoformat()    else:         session.pop('user_birth_date_iso', None) # Ensure it's removed if not provided    return render_template('results.html',                           dog_name=dog_name,                           birthdays=display_birthdays, # Pass filtered list                           same_age_day=same_age_day_date) # Pass same age day date@app.route('/download_ics')def download_ics():    """Gets inputs, recalculates full calendar including same age day, provides ICS."""    dog_name = session.get('dog_name')    dog_birth_date_iso = session.get('dog_birth_date_iso')    user_birth_date_iso = session.get('user_birth_date_iso') # Get user bday string    if not dog_name or not dog_birth_date_iso:        flash("Session expired or invalid. Please enter dog details again.")        return redirect(url_for('index'))    try:        dog_birth_date = date.fromisoformat(dog_birth_date_iso)    except ValueError:        flash("Error retrieving dog birth date. Please enter details again.")        return redirect(url_for('index'))    # --- Get User Birth Date from Session ---    user_birth_date = None    if user_birth_date_iso:        try:            user_birth_date = date.fromisoformat(user_birth_date_iso)        except ValueError:            # Should not happen if saved correctly, but handle gracefully            flash("Error retrieving user birth date from session.")            user_birth_date = None # Proceed without it    # --- Recalculate Birthdays & Calendar ---    _, cal = calculate_all_birthdays(dog_name, dog_birth_date) # Recalculates all 140    # --- Calculate and Add Same Age Day Event (if applicable) ---    if user_birth_date:        same_age_day_date = calculate_same_age_day(dog_birth_date, user_birth_date)        if same_age_day_date:            event = Event()            event.name = f"💫 Same Age Day with {dog_name}!" # Specific label            event.begin = same_age_day_date            event.make_all_day()            event.transparent = True              cal.events.add(event)    # --- Prepare and Send File ---    ics_data = cal.serialize()    buffer = io.BytesIO()    buffer.write(ics_data.encode('utf-8'))    buffer.seek(0)    safe_dog_name = "".join(c for c in dog_name if c.isalnum() or c in (' ', '_')).rstrip()    filename = f"{safe_dog_name}_birthdays_calendar.ics" # Slightly updated filename    return send_file(        buffer,        mimetype='text/calendar',        as_attachment=True,        download_name=filename    )# --- Run the App ---if __name__ == '__main__':    app.run(debug=True)